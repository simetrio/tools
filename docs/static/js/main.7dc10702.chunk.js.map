{"version":3,"sources":["app/Routes.ts","app/Header.tsx","app/Main.tsx","tools/guid-generator/GuidGeneratorUtils.ts","tools/guid-generator/GuidGenerator.tsx","tools/url-encoder/UrlEncoder.tsx","app/Router.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GuidGeneratorRoute","url","name","UrlEncoderRoute","AllRoutes","Header","useState","showBasic","setShowBasic","expand","dark","bgColor","fluid","href","onClick","icon","fas","navbar","show","right","fullWidth","className","tag","map","x","Main","md","GuidGeneratorUtils","props","guids","i","count","push","newGuid","guid","replace","c","r","Math","random","toString","uppercase","toUpperCase","braces","hypens","GuidGenerator","value","formValue","setFormValue","onChangeBoolean","e","target","currentTarget","checked","id","label","onChange","defaultChecked","textarea","rows","join","UrlEncoder","decoded","encoded","encodeURIComponent","decodeURIComponent","Router","path","exact","component","ToolsRouter","to","match","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dc10702.chunk.js","sourcesContent":["export interface Route {\r\n    url: string,\r\n    name: string,\r\n}\r\n\r\nexport const GuidGeneratorRoute: Route = { \r\n    url: \"guid-generator\", \r\n    name: \"Guid Generator\", \r\n}\r\n\r\nexport const UrlEncoderRoute: Route = { \r\n    url: \"url-encode-decode\", \r\n    name: \"Url Encode/Decode\", \r\n}\r\n\r\nexport const AllRoutes: Route[] = [\r\n    GuidGeneratorRoute,\r\n    UrlEncoderRoute,\r\n]","import { useState } from \"react\";\r\nimport { AllRoutes } from \"./Routes\";\r\nimport {\r\n    MDBNavbar,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBNavbarNav,\r\n    MDBNavbarItem,\r\n    MDBNavbarToggler,\r\n    MDBNavbarBrand,\r\n    MDBCollapse,\r\n    MDBDropdown,\r\n    MDBDropdownToggle,\r\n    MDBDropdownMenu,\r\n    MDBDropdownItem,\r\n    MDBDropdownLink\r\n  } from \"mdb-react-ui-kit\";\r\n\r\nexport const Header: React.FC = () => {\r\n    const [showBasic, setShowBasic] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <MDBNavbar expand=\"lg\" dark bgColor=\"primary\">\r\n                <MDBContainer fluid>\r\n                    <MDBNavbarBrand href=\"/\">Olrix Tools</MDBNavbarBrand>\r\n\r\n                    <MDBNavbarToggler\r\n                        aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                        onClick={() => setShowBasic(!showBasic)}\r\n                    >\r\n                        <MDBIcon icon=\"bars\" fas />\r\n                    </MDBNavbarToggler>\r\n\r\n                    <MDBCollapse navbar show={showBasic}>\r\n                        <MDBNavbarNav right fullWidth={false} className=\"mb-2 mb-lg-0\">\r\n                            <MDBNavbarItem>\r\n                                <MDBDropdown>\r\n                                    <MDBDropdownToggle tag=\"a\" className=\"nav-link\">\r\n                                        Choose tools\r\n                                    </MDBDropdownToggle>\r\n                                    <MDBDropdownMenu>\r\n                                        {AllRoutes.map(x => (\r\n                                            <MDBDropdownItem>\r\n                                                <MDBDropdownLink href={`/tools/${x.url}/`}>{x.name}</MDBDropdownLink>\r\n                                            </MDBDropdownItem>\r\n                                        ))}\r\n                                    </MDBDropdownMenu>\r\n                                </MDBDropdown>\r\n                            </MDBNavbarItem>\r\n                        </MDBNavbarNav>\r\n                    </MDBCollapse>\r\n                </MDBContainer>\r\n            </MDBNavbar>\r\n        </>\r\n    )\r\n}","import { MDBBtn, MDBCol, MDBRow } from \"mdb-react-ui-kit\"\r\nimport { AllRoutes } from \"./Routes\"\r\n\r\nexport const Main: React.FC = () => {\r\n    return (\r\n        <MDBRow>\r\n            {AllRoutes.map(x => (\r\n                <MDBCol md=\"3\" className=\"text-center my-2\">\r\n                    <MDBBtn href={`/tools/${x.url}/`} tag=\"a\">{x.name}</MDBBtn>\r\n                </MDBCol>\r\n            ))}\r\n        </MDBRow>\r\n    )\r\n}","interface Props {\r\n    count: number,\r\n    uppercase: boolean,\r\n    braces: boolean,\r\n    hypens: boolean,\r\n}\r\n\r\nexport const GuidGeneratorUtils = {\r\n    generate: (props: Props): string[] => {\r\n        const guids: string[] = [];\r\n        for(let i = 0; i < props.count; i++) {\r\n            guids.push(newGuid(props));\r\n        }\r\n        return guids;\r\n    }\r\n}\r\n\r\nfunction newGuid(props: Props): string {\r\n    let guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n        const r = Math.random() * 16 | 0;\r\n        const v = c === \"x\" ? r : (r && 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n\r\n    if (props.uppercase) {\r\n        guid = guid.toUpperCase();\r\n    }\r\n\r\n    if (props.braces) {\r\n        guid = `{${guid}}`;\r\n    }\r\n\r\n    if (!props.hypens) {\r\n        guid = guid.replace(/-/g, \"\");\r\n    }\r\n\r\n    return guid;\r\n}","import { MDBBtn, MDBCheckbox, MDBCol, MDBInput } from \"mdb-react-ui-kit\";\r\nimport { useState } from \"react\";\r\nimport { GuidGeneratorUtils } from \"./GuidGeneratorUtils\";\r\n\r\ninterface FormValue {\r\n    count: number,\r\n    uppercase: boolean,\r\n    braces: boolean,\r\n    hypens: boolean,\r\n    value: string[],\r\n}\r\n\r\nexport const GuidGenerator: React.FC = () => {\r\n    const [formValue, setFormValue] = useState<FormValue>({\r\n        count: 1,\r\n        uppercase: false,\r\n        braces: false,\r\n        hypens: true,\r\n        value: [],\r\n    });\r\n\r\n    const onChange = (e: any) => {\r\n        setFormValue({ ...formValue, [e.target.name]: e.currentTarget.value });\r\n    };\r\n\r\n    const onChangeBoolean = (e: any) => {\r\n        setFormValue({ ...formValue, [e.target.name]: e.currentTarget.checked });\r\n    };\r\n\r\n    const onGenerate = () => {\r\n        setFormValue({ ...formValue, value: GuidGeneratorUtils.generate(formValue) });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Online Guid Generator</h1>\r\n            <MDBCol md=\"4\" className=\"mb-3\">\r\n                <MDBInput\r\n                    value={formValue.count.toString()}\r\n                    name=\"count\"\r\n                    id=\"count\"\r\n                    label=\"How many?\"\r\n                    onChange={onChange}\r\n                />\r\n            </MDBCol>\r\n\r\n            <MDBCol md=\"4\" className=\"mb-3\">\r\n                <MDBCheckbox\r\n                    name=\"uppercase\" \r\n                    id=\"uppercase\" \r\n                    label=\"Uppercase\"\r\n                    onClick={onChangeBoolean}\r\n                    defaultChecked={formValue.uppercase}\r\n                />\r\n            </MDBCol>\r\n\r\n            <MDBCol md=\"4\" className=\"mb-3\">\r\n                <MDBCheckbox\r\n                    name=\"braces\" \r\n                    id=\"braces\" \r\n                    label=\"Braces\"\r\n                    onClick={onChangeBoolean}\r\n                    defaultChecked={formValue.braces}\r\n                />\r\n            </MDBCol>\r\n\r\n            <MDBCol md=\"4\" className=\"mb-3\">\r\n                <MDBCheckbox\r\n                    name=\"hypens\"\r\n                    id=\"hypens\" \r\n                    label=\"Hypens\"\r\n                    onClick={onChangeBoolean}\r\n                    defaultChecked={formValue.hypens}\r\n                />\r\n            </MDBCol>\r\n\r\n            <MDBCol md=\"4\" className=\"mb-3\">\r\n                <MDBBtn onClick={onGenerate}>Generate</MDBBtn>\r\n            </MDBCol>\r\n\r\n            <MDBCol md=\"4\" className=\"mb-3\">\r\n                <MDBInput label=\"Generated Guids\" textarea rows={10} value={formValue.value.join(\"\\n\")} />\r\n            </MDBCol>\r\n        </>\r\n    )\r\n}","import { MDBCol, MDBInput, MDBRow } from \"mdb-react-ui-kit\";\r\nimport { useState } from \"react\";\r\n\r\ninterface FormValue {\r\n    decoded: string,\r\n    encoded: string,\r\n}\r\n\r\nexport const UrlEncoder: React.FC = () => {\r\n    const [formValue, setFormValue] = useState<FormValue>({\r\n        decoded: '',\r\n        encoded: '',\r\n    });\r\n\r\n    const onEncode = (e: any) => {\r\n        const value = e.currentTarget.value || \"\";\r\n        setFormValue({ ...formValue, decoded: value, encoded: encodeURIComponent(value) });\r\n    }\r\n\r\n    const onDecode = (e: any) => {\r\n        const value = e.currentTarget.value || \"\";\r\n        setFormValue({ ...formValue, decoded: decodeURIComponent(value), encoded: value });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Online Url Encode/Decode</h1>\r\n            <MDBRow>\r\n                <MDBCol md=\"6\" className=\"mb-3\">\r\n                    <MDBInput \r\n                        label=\"Decoded Url\" \r\n                        textarea \r\n                        rows={10} \r\n                        value={formValue.decoded}\r\n                        onChange={onEncode} \r\n                    />\r\n                </MDBCol>\r\n\r\n                <MDBCol md=\"6\" className=\"mb-3\">\r\n                    <MDBInput \r\n                        label=\"Encoded Url\" \r\n                        textarea \r\n                        rows={10} \r\n                        value={formValue.encoded} \r\n                        onChange={onDecode} \r\n                    />\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </>\r\n    )\r\n}","import { Switch, Route, Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport { Main } from \"./Main\";\r\nimport { GuidGeneratorRoute, UrlEncoderRoute } from \"./Routes\";\r\nimport { GuidGenerator } from \"../tools/guid-generator/GuidGenerator\";\r\nimport { UrlEncoder } from \"../tools/url-encoder/UrlEncoder\";\r\n\r\nexport const Router: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact component={Main} />\r\n            <Route path=\"/tools\" component={ToolsRouter} />\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nconst ToolsRouter: React.FC<RouteComponentProps> = (props) => {\r\n    return (\r\n        <Switch>\r\n            <Route path={`${props.match.url}/${GuidGeneratorRoute.url}`} component={GuidGenerator} />\r\n            <Route path={`${props.match.url}/${UrlEncoderRoute.url}`} component={UrlEncoder} />\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"mdb-react-ui-kit/dist/css/mdb.min.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Header } from \"./Header\";\r\nimport { Router } from \"./Router\";\r\nimport { MDBContainer } from \"mdb-react-ui-kit\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Header />\r\n      <MDBContainer fluid className=\"mt-3\">\r\n        <Router />\r\n      </MDBContainer>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}